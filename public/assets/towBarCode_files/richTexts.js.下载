var RICHTEXT={
		JsonToHtml:function(json){
			if(json != undefined && json != "" && json != null && json.indexOf("richText") != -1 ){
				var html;
				var contentText = json ? JSON.parse(json.replace(/\n/g,"\\n").replace(/\r/g,"\\r")): "";
				var contentWrapper = createElement("p");
				var content =createElement('div');
				if (contentText && contentText.richText) {
			        for (var i = 0; i < contentText.richText.length; i++) {
			            var elemAttr = [];
			            if (contentText.richText[i].style && contentText.richText[i].text) {
			                for (var styleProperty in contentText.richText[i].style) {
			                    if (contentText.richText[i].style.hasOwnProperty(styleProperty)) {
			                        switch (styleProperty) {
			                            case 'vertAlign':
			                                if (contentText.richText[i].style[styleProperty] === 2) {
			                                    elemAttr.push('subscript');
			                                } else if (contentText.richText[i].style[styleProperty] === 1) {
			                                    elemAttr.push('superscript');
			                                }
			                                break;
			                            case 'textDecoration':
			                                if ((contentText.richText[i].style[styleProperty] & 1) === 1) {
			                                    elemAttr.push('underline');
			                                }
			                                if ((contentText.richText[i].style[styleProperty] & 2) === 2) {
			                                    elemAttr.push('strikeThrough');
			                                }
			                                break;
			                            case 'foreColor':
			                                elemAttr.push({
			                                    name: 'foreColor',
			                                    value: contentText.richText[i].style[styleProperty]
			                                });
			                                break;
			                            case 'font':
			                                var spanElem =createElement('div');
			                                spanElem.style.font = contentText.richText[i].style[styleProperty];
			                                if (spanElem.style.fontFamily) {
			                                    elemAttr.push({
			                                        name: 'fontName',
			                                        value: spanElem.style.fontFamily
			                                    });
			                                }
			                                if (spanElem.style.fontSize) {
			                                    elemAttr.push({
			                                        name: 'fontSize',
			                                        value: parseInt(spanElem.style.fontSize)
			                                    });
			                                }
			                                if (spanElem.style.fontWeight === 'bold') {
			                                    elemAttr.push('bold');
			                                }
			                                if (spanElem.style.fontStyle === 'italic') {
			                                    elemAttr.push('italic');
			                                }
			                                break;
			                        }
			                    }
			                }
			            }
			            var parentElem = contentWrapper;
			            for (var j = 0; j < elemAttr.length; j++) {
			                var richTextElem;
			                if (typeof elemAttr[j] === 'string') {
			                    richTextElem = createRichTextElement(elemAttr[j]);
			                } else if (typeof elemAttr[j] === 'object' && elemAttr[j]) {
			                    richTextElem = createRichTextElement(elemAttr[j].name, elemAttr[j].value);
			                }
			                appendChild(parentElem, richTextElem);
			                parentElem = richTextElem;
			                if (j === elemAttr.length - 1 && richTextElem) {
			                    if(contentText.richText[i].text.indexOf("\r\n") >= 0){
			                        var text = contentText.richText[i].text.replace("\r\n", "");
			                        richTextElem.innerHTML = text;
			
			                        appendChild(content, contentWrapper);
			
			                        contentWrapper = createElement("p");
			
			                     }
			
			                    else{
			
			                        richTextElem.innerHTML = contentText.richText[i].text;
			
			                     }
			
			                 }
			
			             }
			        }
			    } else {
			    	if (contentText) {
			            contentWrapper.innerHTML = (contentText+"").replace(/(\r\n)|(\n)/g, '<br>');
			        }
			    } 
				if (contentText) {
			        appendChild(content, contentWrapper);
			    }
			
				return content.innerHTML;
			}else{
				return json;
			}
			
		},
}
var createElement = function (tag) {
    return document.createElement(tag);
};
var createRichTextElement = function (tag, value,CLASS) {
    var elem;
    switch (tag) {
        case 'subscript':
            elem = createElement('sub');
            break;
        case 'superscript':
            elem = createElement('sup');
            break;
        case 'underline':
            elem = createElement('u');
            break;
        case 'strikeThrough':
            elem = createElement('strike');
            break;
        case 'foreColor':
            elem = createElement('font');
            elem.color = _colorRGB2Hex(value);
            break;
        case 'fontName':
            elem = createElement('font');
            elem.face = value;
            break;
        case 'fontSize':
            elem = createElement('font');
            elem.size = convertFontSize(value);
            break;
        case 'bold':
            elem = createElement('strong');
            break;
        case 'italic':
            elem = createElement('em');
            break;
        default:
            elem = createElement('span');
            break;
    }
    return elem;
};
var convertFontSize = function (value) {
    if (value <= 10) {
        return 1;
    } else if (value <= 13) {
        return 2;
    } else if (value <= 16) {
        return 3;
    } else if (value <= 18) {
        return 4;
    } else if (value <= 24) {
        return 5;
    } else if (value <= 32) {
        return 6;
    } else {
        return 7;
    }
};
var _colorRGB2Hex = function (color) {
    var rgb = color.split(',');
    var r = parseInt(rgb[0].split('(')[1]);
    var g = parseInt(rgb[1]);
    var b = parseInt(rgb[2].split(')')[0]);
    return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
};
var appendChild = function (parent, child) {
    return parent.appendChild(child);
};
//alert(RICHTEXT.JsonToHtml(json)) 声明json转html 传递json 字符串即可



//把样品参考价格快捷选择数据重新定义
var handleString = function(text) {
	if (text.indexOf("richText") != "-1") {
		text = changeBackString(RICHTEXT.JsonToHtml(text));
	} else {
		text = text.length > 10 ? text.substring(0, 9) + "..." : text;
	}
	return JY.Object.notEmpty(text);
}