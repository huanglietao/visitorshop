<?php
namespace App\Repositories;

use App\Models\SaasCategory;
use App\Models\SaasProdSuppliers;
use App\Models\SaasProdToCustLevel;
use App\Models\SaasProducts;
use App\Models\SaasProductsChanle;
use App\Models\SaasProductsPrint;
use App\Models\SaasProductsRelationAttr;
use App\Models\SaasProductsSku;
use App\Models\SaasSalesChanel;
use App\Models\SaasSizeInfo;
use App\Models\SaasSkuSupPrice;
use App\Models\SaasSkuToCustlevelPrice;
use Illuminate\Support\Facades\DB;
use App\Services\Goods\Info;
use App\Models\SaasProductsMedia;
use App\Exceptions\CommonException;
use App\Repositories\SaasProductsChanleRepository;



/**
 * 仓库模板
 * 仓库模板
 * @author:
 * @version: 1.0
 * @date:
 */
class SaasProductsRepository extends BaseRepository
{
    protected $isCache = false; //是否使用缓存
    protected $modelProdSup;    //商品供货商模型
    protected $modelProdPrint;  //商品印刷模型

    public function __construct(SaasProducts $model,SaasProdSuppliers $prodSup,SaasProductsPrint $print,SaasProductsChanle $productsChanleModel,
                                SaasProductsMedia $media, SaasProductsChanleRepository $pchannle,SaasProductsMediaRepository $mediaRepository,
                                SaasSalesChanel $salesChanelModel,SaasCategoryRepository $categoryRepository,SaasCategory $categoryModel
    )
    {
        //hlt1
        $this->model =$model;
        $this->modelProdSup = $prodSup;
        $this->modelProdPrint = $print;
        $this->modelMedia = $media;
        $this->pchannle = $pchannle;
        $this->mediaRepository = $mediaRepository;
        $this->productsChanleModel = $productsChanleModel;
        $this->salesChanelModel = $salesChanelModel;
        $this->categoryRepository = $categoryRepository;
        $this->categoryModel = $categoryModel;
    }

    public function getList($where=[], $order='created_at', $sort = "desc")
    {
        return parent::getList($where, $order, $sort); // TODO: Change the autogenerated stub
    }
    /**
     * @param null $where
     * @param null $order
     * @return mixed
     */
    public function getTableList($where=null, $order='created_at desc')
    {
        $limit = isset($where['limit']) ? $where['limit']:config('common.page_limit');  //这个10取配置里的
        if (isset($where['limit'])){
            unset($where['limit']);
        }

        $where = $this->parseWhere($where);

        //order 必须以 'id desc'这种方式传入.
        $orderBy = [];
        if (!empty ($order)) {
            $arrOrder = explode(' ', $order);
            if(count($arrOrder) == 2) {
                $orderBy = $arrOrder;
            }
        }
        $query = $this->model;

        if(!empty ($where)) {
            if(isset($where['prod_name'])){
                $query =  $query->where('prod_name', 'like', '%'.$where['prod_name'].'%');
                unset($where['prod_name']);
            }
            $query =  $query->where($where);
        }

        if(!empty($order)) {
            $query =  $query->orderBy('sort','desc')->orderBy($orderBy[0],$orderBy[1]);
        }
        $list = $query->paginate($limit);

        $list = $list->toArray();

        //将id取出来作为新数组
        $prodArr = array_column($list['data'],'prod_id','prod_id');
        //取出商品对应的媒体数据
        $mediaArr = $this->modelMedia->where(['prod_md_ismain' => 1])->whereIn('prod_id',$prodArr)->orderBy('sort','asc')->get()->groupBy("prod_id")->toArray();

        if (isset($where['mch_id'])){
            $mid = $where['mch_id'];
        }else{
            $mid = PUBLIC_CMS_MCH_ID;
        }
        //取出销售渠道
        $channleArr = $this->pchannle->getProductChannleDetail($prodArr,$mid);
        foreach ($list['data'] as $k=>$v)
        {

            if (isset($mediaArr[$v['prod_id']]) && isset($mediaArr[$v['prod_id']][0]))
            {
                $list['data'][$k]['prod_main_thumb'] = $mediaArr[$v['prod_id']][0]['prod_md_path'];
            }else{
                $list['data'][$k]['prod_main_thumb'] = "";
            }


            $list['data'][$k]['channle_arr']=[];
            foreach ($channleArr as $kk=>$vv)
            {
                if (($kk == $v['prod_id'])){
                    $list['data'][$k]['channle_arr'] = $vv;
                }
            }

        }



        return $list;
    }


    /**
     * 新增/修改
     * @param $data
     * @return boolean
     */
    public function save($data)
    {
        if(empty($data['id'])) {
            unset($data['id']);
            $ret = $this->model->insertGetId($data);
            $priKeyValue = $ret;
        } else {
            $priKeyValue = $data['id'];
            unset($data['id']);
            $ret =$this->model->where('prod_id',$priKeyValue)->update($data);
        }
        //判断是否需要更新缓存
        if (isset($this->isCache)&&$this->isCache === true){
            $table_name = $this->model->getTable();
            $redis = app('redis.connection');
            $data['prod_id'] = $priKeyValue;
            //将数据写入缓存
            $redis->set($table_name.'_'.$priKeyValue , json_encode($data));
        }
        return $ret;

    }
    //上下架更新
    public function updataField($where,$data)
    {
        $this->model->where($where)->update($data);

    }

    /**
     * 删除(软删除)
     * @param $id
     * @return bool
     */
    public function delete($id)
    {
        $model = $this->model->find($id);
        $model->delete();

        //删除缓存数据
        if (isset($this->isCache)&&$this->isCache === true){
            $table_name = $this->model->getTable();
            $redis = app('redis.connection');
            $data['prod_id'] = $id;
            $redis->del($table_name.'_'.$id);
        }

        if($model->trashed()){
            return true;
        }else{
            return true;
        }
    }

    //获取品牌名
    public function getBrandName($id)
    {
        $brandRepository = app(SaasBrandRepository::class);
        $brandList = $brandRepository->getBrandList();
        $brandArr = [];
        foreach ($brandList as $k => $v)
        {
            $brandArr[$v['brand_id']] = $v['brand_name'];
        }

        if (isset($brandArr[$id])){
            return $brandArr[$id];
        }else{
            return "";
        }
    }




    //组织渲染数据
    public function organizeData($data)
    {
        $categoryModel = app(SaasCategory::class);
        foreach ($data as $k => $v)
        {
            //获取品牌名
            $data[$k]['prod_brand_name'] = $this->getBrandName($v['prod_brand_id']);
            //获取分类名
            $data[$k]['prod_cate_uid'] = $categoryModel->where(['cate_id' => $v['prod_cate_uid'],'cate_status' => 1])->value('cate_name');
        }


        return $data;
    }


    //获取商品sku属性
    //获取商品属性及对应的属性值列表
    public function getAttributeValue($mid=0,$cateId="",$isAddPage =1)
    {
        $attrRepository = app(SaasProductsAttributeRepository::class);
        $attrValueRepository = app(SaasAttributeValueRepository::class);

        //获取属性列表
        $attrArr = $attrRepository->getAttribute($mid,$cateId,$isAddPage);


        foreach ($attrArr as $k => $v){
            //获取各个属性下的可用属性值
            $attrValueArr = $attrValueRepository->getList(['attr_id' => $v['attr_id']])->toArray();
            //将属性值写入属性数组
            if ($v['attr_flag'] == GOODS_ATTR_PAGE_FLAG)
            {
                //p数属性自然数排序
                $attrArr[$k][$v['attr_id']] = $this->arraySort($attrValueArr,'attr_val_name');
            }else{
                $attrArr[$k][$v['attr_id']] = $attrValueArr;
            }
        }
        return $attrArr;
    }



    /**
     * 按条件获取在售(上架x)的商品
     * @param $where
     */
    public function getInfoOnSale($where)
    {
        $where = $this->parseWhere($where);
        return $this->model->where($where)->where('prod_onsale_status',1)->first();
    }

    /**
     * 获取商品支持的供货商列表
     * @param $prodId 商品id
     */
    public function getSuppliersList($prodId)
    {
        $list = $this->modelProdSup->where('prod_id', $prodId)->get();
        return $list;
    }

    //组织销售渠道定价的还原数据
    public function recovePrice($channleList,$priceList)
    {

        foreach ($channleList as $k => $v){
            foreach ($priceList as $kk=>$vv)
            {

                //匹配相同渠道相同角色组的价格
                if ($k == $vv['channle_id'] && isset($v['customer'][$vv['customer_id']])){
                    //匹配成功
                    $channleList[$k]['price'][$vv['customer_id']] = $vv['channle_price'];
                    if (isset($vv['channle_add_price'])){
                        $channleList[$k]['add_price'][$vv['customer_id']] = $vv['channle_add_price'];
                    }
                    if (isset($vv['sku_sale_price_id'])){
                        $channleList[$k]['price_id'][$vv['customer_id']] = $vv['sku_sale_price_id'];
                    }
                }
            }
        }

        return $channleList;

    }
    //组织供货渠道定价的还原数据
    public function recoveSupplierPrice($supplierList,$priceList)
    {
        foreach ($supplierList as $k => $v){
            foreach ($priceList as $kk => $vv){

                if ($v['sup_id'] == $vv['sup_id']){
                    //匹配成功
                    $supplierList[$k]['start_price'] = $vv['start_price'];
                    if (isset($vv['add_price'])){
                        $supplierList[$k]['add_price'] = $vv['add_price'];
                        $supplierList[$k]['sup_price_id'] = $vv['sku_sup_price_id'];
                    }


                }
            }

        }
        return $supplierList;

    }
    //组织商品数据
    public function setGoods($data,$action='add',$mid = PUBLIC_CMS_MCH_ID)
    {

        $prod_id = "";

        if ($action == 'add')
        {
            $is_personal_printing = 1;
            if ($data['level_2_cate_id']!=PERSONAL_PRINTING_ID && $data['level_2_cate_id']!=COMMERCIAL_PRINTING_ID){
                //非个性类影像印刷
                $is_personal_printing = 0;
            }
        }else{
            //编辑操作
            $is_personal_printing = $data['personal_print']??1;
            $prod_id = $data['prod_id'];

        }
        $skuArr = [];

        if ($mid != PUBLIC_CMS_MCH_ID)
        {
            //验证销售渠道跟供货商选择
            if (empty($data['sales_chanel'])){
                return [
                    'code' => 0,
                    'msg'  => '请至少选择一个销售渠道'
                ];
            }
        }


        if (empty($data['supplier'])){
            return [
                'code' => 0,
                'msg'  => '请至少选择一个供货商'
            ];
        }

        //如果是商户，需要插入商品对渠道等级用户开卖表
        $sale_channle_cumtomer = [];
        if ($mid != PUBLIC_CMS_MCH_ID)
        {
            $sale_channle_cumtomer = $data['sales_chanel_customer']??[];
        }


        $data['is_personal_printing'] = $is_personal_printing;
        //组织货品信息
        $skuArr = $this->getSkuArr($data);

        $postArr = [
            'mch_id'                    => $mid,
            'is_personal_printing'      => $is_personal_printing,
            'prod_id'                   => $prod_id,
            'prod_cate_uid'             => $data['level_3_cate_id']??"",
            //商家自定义分类
            'mch_prod_cate_uid'         => $data['mch_prod_cate_uid']??0,
            'prod_name'                 => $data['prod_name'],
            'prod_abbr'                 => $data['prod_abbr']??"",
            'prod_title'                => $data['prod_title']??"",
            'prod_sn'                   => $data['prod_sn'],
            'prod_fee'                  => $data['prod_fee']??0,
            'prod_unit'                 => $data['prod_unit']??"",
            'prod_stock_status'         => $data['prod_stock_status']??0,
            //库存值与预警值 开启库存时需传
            'prod_stock_inventory'      => $data['prod_stock_inventory']??0,
            'prod_stock_waring'         => $data['prod_stock_waring']??0,
            //库存值与预警值
            'prod_brand_id'             => $data['prod_brand_id']??0,
            'prod_express_type'         => $data['prod_express_type']??"",
            //物流费用 由物流方式确定（2选1）
            'prod_express_fee'          => $data['prod_express_fee']??"",
            'prod_express_tpl_id'       => $data['prod_express_tpl_id']??0,
            //物流费用
            'prod_details_pc'           => $data['prod_details_pc']??"",
            'prod_details_mobile'       => $data['prod_details_mobile']??"",
            'prod_comment_flag'         => $data['prod_comment_flag']??"",
            'prod_aftersale_flag'       => $data['prod_aftersale_flag']??"",
            'prod_return_flag'          => $data['prod_return_flag']??"",
            'prod_onsale_status'        => $data['prod_onsale_status'],
            'prod_price_type'           => $data['prod_price_type'],
            'prod_onsale_issingle'      => $data['prod_onsale_issingle'],
            //商品相册 插入商品媒体表
            'prod_photos'               => $data['prod_photos']??"",
            'prod_dist_rule'            => $data['prod_dist_rule']??0,
            //渠道,插入商品对应渠道表（数组）
            'sales_chanel'              => $data['sales_chanel']??[],
            'sale_channle_cumtomer'     => $sale_channle_cumtomer,
            //供货商 插入商品对应供货商表()
            'supplier'                  => $data['supplier']??[],
            //规格参数（个性印刷需传）
            'prod_size_id'              => $data['prod_size_id']??0,
            'prod_is_add_page'          => $data['prod_is_add_page']??0,
            'prod_min_add_page'         => $data['prod_min_add_page']??0,
            'prod_max_add_page'         => $data['prod_max_add_page']??0,
            //prod_is_add_page为1（可增减p时需传）
            'prod_add_page'             => $data['prod_add_page']??0,
            //sku列表
            'prod_sku_arr'              => $skuArr,


            'created_at'                => time(),
        ];

        if ($action == "add")
        {
            $goodService = app(Info::class);
            $re_data = $goodService->createGoods($postArr);
        }else{
            $re_data = $this->updateGoods($postArr);
        }


        return $re_data;

    }


    /**
     * 获取相对应分类的商品
     * $params $prod_cate_uid 分类id
     *         $mch_id 商家id
     *         $num  数量
     * $return $products_list 同分类下的商品
     * use_address:Agent/Goods/ListController
     *             Agent/Goods/CategoryController
     */
    public function getProducts($pro_cate_uid,$mch_id,$num=null,$where=[])
    {
        $products_list = [];
        $prodID_list = [];
        //获取属于分销渠道的id
        $chanle_id = $this->salesChanelModel->where(['cha_flag'=>CHANEL_TERMINAL_AGENT,'short_name'=>AGENT_CHANNEL])->first();
        $cha_id = $chanle_id['cha_id'];
        //获取该渠道下的商家商品id
        $prod_ids = $this->productsChanleModel->where(['cha_id'=>$cha_id,'mch_id'=>$mch_id])->select("prod_id")->get()->toArray();
        foreach ($prod_ids as $key =>$val){
            $prodID_list[$key] = $val['prod_id'];
        }
        //获取属于该商家并且销售渠道为分销，已经上架的商品
        // .dai 加搜索商品
        if(!empty($where)){
            if(isset($where['prod_name'])){
                $list = $this->model->whereIn('prod_id',$prodID_list)->where(['prod_cate_uid'=>$pro_cate_uid,'mch_id'=>$mch_id,'prod_onsale_status'=>1])->where('prod_name', 'like', '%'.$where['prod_name'].'%')->orderBy('prod_sale_num','desc')->orderBy('prod_id','desc')->limit($num)->get();
                unset($where['prod_name']);
            }

        }else{
            $list = $this->model->whereIn('prod_id',$prodID_list)->where(['prod_cate_uid'=>$pro_cate_uid,'mch_id'=>$mch_id,'prod_onsale_status'=>1])->orderBy('prod_sale_num','desc')->orderBy('prod_id','desc')->limit($num)->get();
        }
        $products_list = json_decode($list,true);

        foreach ($products_list as $key=>$val){
            /*//当商品名字过长时
            if(mb_strlen($val['prod_name'])>8){
                $products_list[$key]['prod_name'] = mb_substr($val['prod_name'],0,8)."...";
            }else{
                $products_list[$key]['prod_name'] = mb_substr($val['prod_name'],0,8);
            }
            //当商品标题过长时
            if(mb_strlen($val['prod_title'])>13){
                $products_list[$key]['prod_title'] = mb_substr($val['prod_title'],0,13)."...";
            }else{
                $products_list[$key]['prod_title'] = mb_substr($val['prod_title'],0,13);
            }*/
            //获取商品对应的图片
            $prod_main_thumb = $this->mediaRepository->getProductPhoto($val['prod_id']);
            //得到商品的主图，默认为第一张图片
            $products_list[$key]['prod_main_thumb'] = $prod_main_thumb[0]['prod_md_path'];
            //得到商品的相册
            foreach ($prod_main_thumb as $k=>$v){
                $products_list[$key]['prod_photos'][$k] = $v['prod_md_path'];
            }
        }
        return $products_list;
    }

    /**
     * 获取某个商品信息
     * $params $prod_id 商品id
     * $return $goods_info
     * use_address:Agent/Goods/DetailController
     *             Merchant/Statistics/GoodsController
     */
    public function getProductInfo($mch_id,$prod_id=null)
    {
        $product_info = [];
        if(!empty($prod_id)){
            $product_info = $this->model->where(['prod_id'=>$prod_id,'mch_id'=>$mch_id])->get()->toArray();
            if(empty($product_info)){
                return $product_info;
            }
            $prod_size = $this->modelProdPrint->where('prod_id',$prod_id)->select('prod_size_id','prod_pt_variable')->first();
            $product_info[0]['prod_size_id'] = $prod_size['prod_size_id'];
            $product_info[0]['prod_pt_variable'] = $prod_size['prod_pt_variable'];
        }else{
            $product_info = $this->model->where(['mch_id'=>$mch_id])->get()->toArray();
        }

        foreach ($product_info as $key=>$val){
            $prod_main_thumb = $this->mediaRepository->getProductPhoto($val['prod_id']);
            $product_info[$key]['prod_main_thumb'] = $prod_main_thumb[0]['prod_md_path'];
            foreach ($prod_main_thumb as $k=>$v){
                $product_info[$key]['prod_photos'][$k] = $v['prod_md_path'];
            }
        }

        return $product_info;
    }

    /**
     * 印刷增减p信息.返回false不示非增减p商品
     * @param $prodId 商品id
     * @return  mixed
     */
    public function addPageInfo($prodId)
    {
        $info = $this->modelProdPrint->where('prod_id', $prodId)->first();
        if (!empty ($info)&&$info['prod_pt_variable']==0) {
            return false;
        }
        return $info;
    }

    //组织货品数据
    public function getSkuArr($data)
    {

        $skuArr = [];

        if ($data['prod_price_type'] == 1){
            //spu 传过来的数组对应一条数据
            $skuArr[0]['attr_id']           = "";
            $skuArr[0]['sku_id']            = $data['sku_id'][0];
            //是否加减p所需字段不一样

            if (isset($data['prod_is_add_page'])&&$data['prod_is_add_page'] == 1){
                //可加减p


                $skuArr[0]['prod_sku_price']          = $data['prod_min_p_price'][0];
                $skuArr[0]['prod_sku_cost']           = $data['prod_min_p_cost'][0];
                $skuArr[0]['prod_sku_weight']         = $data['prod_min_p_weight'][0];
                $skuArr[0]['prod_spine_thickness']    = $data['prod_min_spine_thickness'][0];
                //组织加p的额外信息(销售价|成本价|重量|书脊厚度)
                $skuArr[0]['prod_sku_addp_info']      = $data['prod_add_p_price'][0].'|'.$data['prod_add_p_cost'][0].'|'.$data['prod_add_p_weight'][0].'|'.$data['prod_add_spine_thickness'][0];

            }else{
                //不可加减p
                $skuArr[0]['prod_sku_price']          = $data['prod_sku_price'][0];
                $skuArr[0]['prod_sku_cost']           = $data['prod_sku_cost'][0];
                $skuArr[0]['prod_sku_weight']         = $data['prod_sku_weight'][0];
                if ($data['is_personal_printing'])
                {

                    $skuArr[0]['prod_spine_thickness']    = $data['prod_sku_spine_thickness'][0];
                }

                //组织加p的额外信息(销售价|成本价|重量)
                $skuArr[0]['prod_sku_addp_info'] = "";
            }



            $skuArr[0]['prod_min_photo']       = $data['prod_min_photo'][0];
            $skuArr[0]['prod_max_photo']       = $data['prod_max_photo'][0];
            $skuArr[0]['prod_sku_sn']          = $data['prod_sku_sn'][0];
            $skuArr[0]['prod_supplier_sn']     = $data['prod_supplier_sn'][0];
            //判断是否有销售渠道定价
            if (isset($data['sale_channle_price'])){
                $skuArr[0]['sale_channle_price']  = $data['sale_channle_price'][0];
            }else{
                $skuArr[0]['sale_channle_price']  = "";
            }
            //判断是否有供货商定价
            if (isset($data['supplier_price'])){
                $skuArr[0]['supplier_price']  = $data['supplier_price'][0];
            }else{
                $skuArr[0]['supplier_price']  = "";
            }

            $skuArr[0]['sku_onsale'] = $data['sku_onsale'][0];

        }else{
            //sku 传过来的数据有多组,每组的健值都一一对应

            if (isset($data['prod_is_add_page'])&&$data['prod_is_add_page'] == 1)
            {
                //不可加减p
                foreach ($data['attr_id'] as $k => $v)
                {
                    $skuArr[$k]['attr_id']                 = $v;
                    $skuArr[$k]['sku_id']                  = $data['sku_id'][$k];
                    $skuArr[$k]['prod_sku_price']          = $data['prod_min_p_price'][$k];
                    $skuArr[$k]['prod_sku_cost']           = $data['prod_min_p_cost'][$k];
                    $skuArr[$k]['prod_sku_weight']         = $data['prod_min_p_weight'][$k];
                    $skuArr[$k]['prod_min_photo']          = $data['prod_min_photo'][$k];
                    $skuArr[$k]['prod_max_photo']          = $data['prod_max_photo'][$k];
                    $skuArr[$k]['prod_spine_thickness']    = $data['prod_min_spine_thickness'][$k];
                    //组织加p的额外信息(销售价|成本价|重量)
                    $skuArr[$k]['prod_sku_addp_info'] = $data['prod_add_p_price'][$k]."|".$data['prod_add_p_cost'][$k].'|'.$data['prod_add_p_weight'][$k].'|'.$data['prod_add_spine_thickness'][$k];
                    $skuArr[$k]['prod_sku_sn']       = $data['prod_sku_sn'][$k];
                    $skuArr[$k]['prod_supplier_sn']  = $data['prod_supplier_sn'][$k];
                    //判断是否有销售渠道定价
                    if (isset($data['sale_channle_price']) && isset($data['sale_channle_price'][$k])){
                        $skuArr[$k]['sale_channle_price']  = $data['sale_channle_price'][$k];
                    }else{
                        $skuArr[$k]['sale_channle_price']  = "";
                    }
                    //判断是否有供货商定价
                    if (isset($data['supplier_price']) && isset($data['supplier_price'][$k])){
                        $skuArr[$k]['supplier_price']  = $data['supplier_price'][$k];
                    }else{
                        $skuArr[$k]['supplier_price']  = "";
                    }
                    $skuArr[$k]['sku_onsale'] = $data['sku_onsale'][$k];
                }

            }else{
                //是否加减p所需字段不一样
                foreach ($data['attr_id'] as $k => $v)
                {
                    $skuArr[$k]['attr_id']                 = $v;
                    $skuArr[$k]['sku_id']                  = $data['sku_id'][$k];
                    $skuArr[$k]['prod_sku_price']          = $data['prod_sku_price'][$k];
                    $skuArr[$k]['prod_sku_cost']           = $data['prod_sku_cost'][$k];
                    $skuArr[$k]['prod_sku_weight']         = $data['prod_sku_weight'][$k];
                    $skuArr[$k]['prod_min_photo']          = $data['prod_min_photo'][$k];
                    $skuArr[$k]['prod_max_photo']          = $data['prod_max_photo'][$k];
                    if ( $data['is_personal_printing'])
                    {
                        $skuArr[$k]['prod_spine_thickness']    = $data['prod_sku_spine_thickness'][$k];
                    }

                    //组织加p的额外信息(销售价|成本价|重量|书脊厚度)
                    $skuArr[$k]['prod_sku_addp_info'] = "";
                    $skuArr[$k]['prod_sku_sn']       = $data['prod_sku_sn'][$k];
                    $skuArr[$k]['prod_supplier_sn']  = $data['prod_supplier_sn'][$k];
                    //判断是否有销售渠道定价
                    if (isset($data['sale_channle_price']) && isset($data['sale_channle_price'][$k])){
                        $skuArr[$k]['sale_channle_price']  = $data['sale_channle_price'][$k];
                    }else{
                        $skuArr[$k]['sale_channle_price']  = "";
                    }
                    //判断是否有供货商定价
                    if (isset($data['supplier_price']) && isset($data['supplier_price'][$k])){
                        $skuArr[$k]['supplier_price']  = $data['supplier_price'][$k];
                    }else{
                        $skuArr[$k]['supplier_price']  = "";
                    }
                    $skuArr[$k]['sku_onsale'] = $data['sku_onsale'][$k];

                }
            }


        }
        return $skuArr;
    }
    /**
     * 获取商品关联的所有信息
     * @param $prodId 商品id
     * @return  mixed
     */
    public function getProductsRelationInfo($prodId,$mid = PUBLIC_CMS_MCH_ID)
    {
        //基础商品信息
        $productBaseInfo = $this->model->where(['prod_id'=>$prodId])->get()->toArray();
        if (empty($productBaseInfo)){
            return [];
        }else{
            $productInfo = $productBaseInfo[0];
            //分类名称
            $categoryRepository = app(SaasCategoryRepository::class);
            $productInfo['cate_name'] = implode(">",$categoryRepository->getAllCateName($productInfo['prod_cate_uid']));
            //商品品牌
            $productInfo['brand_name'] = $this->getBrandName($productInfo['prod_brand_id']);
            //售后标识
            $productInfo['aftersale_arr'] = explode(",",$productInfo['prod_aftersale_flag']);
            //评论标识
            $productInfo['comment_arr'] = explode(",",$productInfo['prod_comment_flag']);
            //退货标识
            $productInfo['return_arr'] = explode(",",$productInfo['prod_return_flag']);
            //商家自定义分类
            $productInfo['mch_cus_cate'] = explode(",",$productInfo['mch_prod_cate_uid']);
            //商品图片
            $productMediaRepository = app(SaasProductsMediaRepository::class);
            $productsPhotoArr  = $productMediaRepository->getProductPhoto($prodId);
            foreach ($productsPhotoArr as $k => $v)
            {
                $productInfo['photo'][] = $v['prod_md_path'];
            }
            if (isset($productInfo['photo'])){
                $productInfo['photo_str'] = implode(',',$productInfo['photo']);
            }else{
                $productInfo['photo_str'] = [];
            }

            //销售渠道
            $saleChannleRepository = app(SaasProductsChanleRepository::class);
            //商品用户等级
            $prodCustLevelRepository = app(SaasProdToCustLevelRepository::class);
            $saleChannleArr  = $saleChannleRepository->getProductChannle($prodId,$mid);
            $productInfo['sale_channle'] = [];
            $productInfo['prod_custom'] = [];
            foreach ($saleChannleArr as $k => $v)
            {
                $productInfo['sale_channle'][] = $v['cha_id'];
                $productInfo['prod_custom'][$v['cha_id']]['is_exist'] = 0;
                $productInfo['prod_custom'][$v['cha_id']]['prodCustLevelArr'] = [];

                if ($mid!=PUBLIC_CMS_MCH_ID)
                {
                    //商品对用户等级
                    $prodCustArr = $prodCustLevelRepository->getProdCustList($prodId,$mid,$v['cha_id']);
                    $productInfo['prod_custom'][$v['cha_id']]['is_exist']   = $prodCustArr['prodCustCha'];
                    //该商品所勾选的用户等级
                    $productInfo['prod_custom'][$v['cha_id']]['prodCustLevelArr'] = $prodCustArr['prodCustLevelArr'];
                }

            }






            //供应商渠道
            $supplierRepository = app(SaasProductsSuppliersRepository::class);
            $supplierArr  = $supplierRepository->getProductSupplier($prodId,$mid);
            foreach ($supplierArr as $k => $v)
            {
                $productInfo['supplier_channle'][] = $v['sup_id'];
            }
            //判断是否为影像类商品
            $productInfo['is_personal_print'] = $categoryRepository->isPersonalPrint($productInfo['prod_cate_uid']);
            //影像类商品取规格参数
            if ($productInfo['is_personal_print']){
                //从商品印刷表获取对应数据
                $prodPrintRepository = app(SaasProductsPrintRepository::class);
                $productInfo['print'] = $prodPrintRepository->getProductPrint($prodId,$productInfo['mch_id']);

            }
            //sku商品取属性
            if ($productInfo['prod_price_type'] == SKU)
            {
                $prodRelationRepository = app(SaasProductsRelationAttrRepository::class);
                $attributeArr = $prodRelationRepository->getAllAttribute($prodId,$productInfo['mch_id']);
                $productInfo['attribute'] = $attributeArr['attribute'];
                $productInfo['attribute_value'] = $attributeArr['attr_value'];
                $productInfo['attribute_name'] = $attributeArr['attr_name'];
            }

            //获取商品的货品信息
            $productSkuRepository = app(SaasProductsSkuRepository::class);
            $productSkuInfo = $productSkuRepository->getSkuDetail($prodId);


            $salePriceRepository = app(SaasSkuToCustlevelPriceRepository::class);
            $skuIdArr = [];
            foreach ($productSkuInfo as $k => $v)
            {
                $skuIdArr[] = $v['prod_sku_id'];
            }
            //获取货品的销售定价
            $skuSalePriceInfo = $salePriceRepository->WhereIn('prod_sku_id',$skuIdArr)->toArray();

            //获取货品的供货定价
            $saleSupPriceRepository = app(SaasSkuSupPriceRepository::class);
            $skuSupPriceInfo = $saleSupPriceRepository->WhereIn('prod_sku_id',$skuIdArr)->toArray();



            foreach ($productSkuInfo as $k => $v)
            {

                $price = [];
                foreach ($skuSalePriceInfo as $kk => $vv)
                {
                    if ($vv['prod_sku_id'] == $v['prod_sku_id'])
                    {
                        $price[] = [
                            'customer_id'            => $vv['cust_lv_id'],
                            'channle_id'             => $vv['cha_id'],
                            'channle_price'          => $vv['sku_cust_lv_price'],
                            'channle_add_price'      => $vv['addp_price'],
                            'sku_sale_price_id'      => $vv['sku_cust_lv_id']
                        ];
                    }
                }
                if (!empty($price)){
                    $new_price = json_encode($price);
                }else{
                    $new_price = "";
                }

                $supPrice = [];
                foreach ($skuSupPriceInfo as $kk => $vv)
                {
                    if ($vv['prod_sku_id'] == $v['prod_sku_id'])
                    {
                        $supPrice[] = [
                            'sup_id'                 => $vv['sup_id'],
                            'start_price'            => $vv['sku_sup_price'],
                            'add_price'              => $vv['addp_price'],
                            'sku_sup_price_id'       => $vv['sku_sup_id']
                        ];
                    }
                }
                if (!empty($supPrice)){
                    $new_sup_price = json_encode($supPrice);
                }else{
                    $new_sup_price = "";
                }

                $productSkuInfo [$k]['sale_channle_price'] = $new_price;
                $productSkuInfo [$k]['sup_channle_price'] = $new_sup_price;
            }
            $productInfo['sku_info'] = $productSkuInfo;
            //获取货品的供货定价




            return $productInfo;





        }

    }

    //更新商品逻辑
    public function updateGoods($postArr)
    {

        try {

            \DB::beginTransaction();
            //商品表数据
            $product = [
                //商家自定义分类
                'mch_prod_cate_uid'         => $postArr['mch_prod_cate_uid']??0,
                'prod_name'                 => $postArr['prod_name']??"",
                'prod_abbr'                 => $postArr['prod_abbr']??"",
                'prod_title'                => $postArr['prod_title']??"",
                'prod_sn'                   => $postArr['prod_sn']??"",
                'prod_fee'                  => $postArr['prod_fee']??0.00,
                'prod_unit'                 => $postArr['prod_unit']??"",
                'prod_stock_status'         => $postArr['prod_stock_status']??0,
                'prod_brand_id'             => $postArr['prod_brand_id']??0,
                'prod_express_type'         => $postArr['prod_express_type']??"",
                'prod_details_pc'           => $postArr['prod_details_pc']??"",
                'prod_details_mobile'       => $postArr['prod_details_mobile']??"",
                'prod_comment_flag'         => $postArr['prod_comment_flag']??"",
                'prod_aftersale_flag'       => $postArr['prod_aftersale_flag']??"",
                'prod_return_flag'          => $postArr['prod_return_flag']??"",
                'prod_onsale_status'        => $postArr['prod_onsale_status'],
                'prod_onsale_issingle'      => $postArr['prod_onsale_issingle'],
                'prod_dist_rule'            => $postArr['prod_dist_rule'],
                'updated_at'                => time(),
            ];

            //是否启用库存
            if ($product['prod_stock_status'] == PROD_STOCK_STATUS){
                $product['prod_stock_inventory'] = $postArr['prod_stock_inventory'];
                $product['prod_stock_waring']    = $postArr['prod_stock_waring'];
            }
            //物流方式
            if ($postArr['prod_express_type'] == FIXED_FEE){
                //固定收取物流费用
                $product['prod_express_fee'] = $postArr['prod_express_fee']?$postArr['prod_express_fee']:0;
            }else{
                //使用快递模板收费
                $product['prod_express_tpl_id'] = $postArr['prod_express_tpl_id'];
            }
            $productId = $postArr['prod_id'];
            //更新商品表数据  hlt
            $this->model->where(['prod_id' => $productId])->update($product);


            //商品媒体表数据


            if ($postArr['prod_photos']!=""){
                $photoArr = explode(',',$postArr['prod_photos']);
                $media = app(SaasProductsMediaRepository::class);
                //先删除媒体库中的数据，再重新插入 hlt
                $media->delProductsPhoto($productId);
                //重新插入
                foreach ($photoArr as $k=>$v){
                    $mediaArr = [];
                    $mediaArr['prod_id']        = $productId;
                    $mediaArr['prod_md_path']   = $v;
                    $mediaArr['prod_md_ismain'] = 1;
                    $mediaArr['prod_md_type']   = 1;
                    $mediaArr['sort']           = ++$k;
                    $mediaArr['created_at']     = time();
                    //插入商品媒体表 hlt
                    $media->insert($mediaArr);

                }
            }

            //获取当前商品对应的渠道
            $pChanle = app(SaasProductsChanleRepository::class);
            $pastChannleArr = $pChanle->getProductChannle($productId,$postArr['mch_id']);
            $pastChannleArr = array_column($pastChannleArr,'cha_id','prod_cha_id');
            //比较区别,获取增加跟删除的id
            $chaArr = $this->checkDiff($pastChannleArr,$postArr['sales_chanel']);
            //删除取消选中的渠道
            foreach ($chaArr['del'] as $k =>$v){
                $pChanle->destroy($k);
            }
            //商品对应渠道表数据 添加新选中的渠道
            foreach ($chaArr['add'] as $k => $v)
            {
                $channleArr = [];
                $channleArr['cha_id']         = $v;
                $channleArr['prod_id']        = $productId;
                $channleArr['mch_id']         = $postArr['mch_id'];
                $channleArr['sort']           =   ++$k;
                $channleArr['created_at']     =   time();
                //插入商品对应渠道表 waiting hlt
                $pChanle->insert($channleArr);
            }

            //比对商品对应渠道等级表
            //获取该商品当前的渠道等级数组
            $prodCustLevel = app(SaasProdToCustLevel::class);



            if ($postArr['mch_id']!=PUBLIC_CMS_MCH_ID && isset($postArr['sale_channle_cumtomer']))
            {
                $dbLevel  = [];
                $nowLevel = [];
                $pLevel = $prodCustLevel->where(['prod_id' => $productId])->get()->toArray();

                //获取数据库中的当前渠道用户等级
                foreach ($pLevel as $k => $v)
                {
                    $dbLevel[] = $v['cha_id'].'|'.$v['cust_lv_id'];
                }
                //组织编辑传过来的渠道用户等级
                foreach ($postArr['sale_channle_cumtomer'] as $k => $v)
                {
                    foreach ($v as $kk => $vv)
                    {
                        $nowLevel[] = $k.'|'.$vv;
                    }

                }

                //比较两个数组的不同
                $addArr  = array_diff($nowLevel,$dbLevel);
                $delArr = array_diff($dbLevel,$nowLevel);

                foreach ($delArr as $k=>$v)
                {
                    //删除
                    $delArr = explode('|',$v);
                    $prodCustLevel->where(['prod_id' => $productId,'cha_id' => $delArr[0],'cust_lv_id'=>$delArr[1]])->delete();
                }
                foreach ($addArr as $k => $v)
                {
                    $newDiffArr = explode('|',$v);
                    //新增
                    $addArr = [
                        'mch_id' => $postArr['mch_id'],
                        'prod_id' => $productId,
                        'cha_id'  => $newDiffArr[0],
                        'cust_lv_id' => $newDiffArr[1],
                        'created_at'  => time()
                    ];
                    $prodCustLevel->insert($addArr);
                }

            }


            //获取当前商品对应的供货商
            $pSupplier = app(SaasProductsSuppliersRepository::class);
            $pastSupplierArr = $pSupplier->getProductSupplier($productId,$postArr['mch_id']);
            $pastSupplierArr = array_column($pastSupplierArr,'sup_id','prod_sup_id');

            //比较区别,获取增加跟删除的id
            $chaArr = $this->checkDiff($pastSupplierArr,$postArr['supplier']);
            //删除取消选中的渠道
            foreach ($chaArr['del'] as $k =>$v){
                $pSupplier->destroy($k);
            }

            //商品对应供货商表
            foreach ($chaArr['add'] as $k => $v)
            {
                $supplierArr=[];
                $supplierArr['prod_id']    = $productId;
                $supplierArr['sup_id']     = $v;
                $supplierArr['created_at'] = time();
                //插入商品对供货商表 hlt
                $pSupplier->insert($supplierArr);

            }
            //个性影像跟实物商品添加逻辑
            if ($postArr['is_personal_printing'])
            {
                $pPrint = app(SaasProductsPrintRepository::class);
                //个性影像
                //规格逻辑操作
                $sizeArr = [];
                //判断是否增减p
                $sizeArr['prod_pt_variable']             = $postArr['prod_is_add_page'];
                $sizeArr['prod_id']                      = $productId;
                $sizeArr['prod_pt_min_p']                = $postArr['prod_min_add_page']??0;
                $sizeArr['prod_pt_max_p']                = $postArr['prod_max_add_page']??0;
                $sizeArr['prod_size_id']                 = $postArr['prod_size_id'];
                $sizeArr['created_at']                   = time();

                if ($postArr['prod_is_add_page']){
                    //可增减p
                    $sizeArr['prod_pt_variable_base']  = $postArr['prod_add_page'];
                }
                //插入商品印刷表 hlt
                $pPrint->update(['prod_id' => $productId],$sizeArr);

            }

            //添加sku表（1可加减p 2不可加减p ）
            $attrValue = app(SaasAttributeValueRepository::class);
            $relationAttr = app(SaasProductsRelationAttrRepository::class);
            $repoSku = app(SaasProductsSkuRepository::class);
            $custlevelPrice = app(SaasSkuToCustlevelPriceRepository::class);
            $supPrice = app(SaasSkuSupPriceRepository::class);
            $relationAttrModel = app(SaasProductsRelationAttr::class);

            if ($postArr['prod_price_type'] == 1){
                //spu 无需关联属性操作
                //直接加入sku表
                foreach ($postArr['prod_sku_arr'] as $k=>$v){
                    $prodSku = [];
                    $prodSku['prod_id']                 = $productId;
                    $prodSku['prod_attr_comb']          = "";
                    $prodSku['prod_sku_sn']             = $v['prod_sku_sn'];
                    $prodSku['prod_sku_price']          = $v['prod_sku_price'];
                    $prodSku['prod_sku_cost']           = $v['prod_sku_cost'];
                    $prodSku['prod_sku_weight']         = $v['prod_sku_weight'];
                    $prodSku['prod_min_photo']          = $v['prod_min_photo'];
                    $prodSku['prod_max_photo']          = $v['prod_max_photo'];
                    $prodSku['prod_supplier_sn']        = $v['prod_supplier_sn'];
                    if ($postArr['is_personal_printing'])
                    {
                        $prodSku['prod_spine_thickness']    = $v['prod_spine_thickness']?$v['prod_spine_thickness']:0;
                    }

                    $prodSku['prod_sku_addp_info']      = $v['prod_sku_addp_info'];
                    $prodSku['prod_sku_onsale_status']  = $v['sku_onsale'];

                    //修改sku表  waiting
                    //更改数据
                    $prodSku['updated_at']              = time();
                    //hlt
                    $repoSku->update(['prod_sku_id' =>$v['sku_id'] ],$prodSku);
                    $skuId = $v['sku_id'];

                    $this->changeMchAttr($skuId,$productId);


                    //插入销售渠道定价
                    if ($v['sale_channle_price']){
                        $saleChannleArr = json_decode($v['sale_channle_price'],true);

                        foreach ($saleChannleArr as $kk=>$vv){
                            if ((isset($vv['channle_price']) && $vv['channle_price'] !== "" ) || (isset($vv['channle_add_price']) && $vv['channle_add_price'] !== "" ))
                            {
                                $saleChannleArrIn = [];
                                $saleChannleArrIn['mch_id'] = $postArr['mch_id'];
                                $saleChannleArrIn['prod_sku_id'] = $skuId;
                                $saleChannleArrIn['cha_id'] = $vv['channle_id'];
                                $saleChannleArrIn['cust_lv_id'] = $vv['customer_id'];
                                $saleChannleArrIn['sku_cust_lv_price'] = $vv['channle_price']??0;
                                $saleChannleArrIn['addp_price'] = $vv['channle_add_price']??0;
                                if ($saleChannleArrIn['sku_cust_lv_price'] == ""){
                                    $saleChannleArrIn['sku_cust_lv_price'] = 0;
                                }
                                if ($saleChannleArrIn['addp_price'] == ""){
                                    $saleChannleArrIn['addp_price'] = 0;
                                }

                                if ($vv['sku_sale_price_id'] != "") {
                                    //更改数据
                                    $saleChannleArrIn['updated_at'] = time();
                                    //hlt
                                    $custlevelPrice->update(['sku_cust_lv_id' => $vv['sku_sale_price_id']], $saleChannleArrIn);
                                } else {
                                    //插入数据 hlt
                                    $saleChannleArrIn['created_at'] = time();
                                    $custlevelPrice->insert($saleChannleArrIn);
                                }
                            }else if ($vv['sku_sale_price_id'] != "" && ((isset($vv['channle_price']) && $vv['channle_price'] == "" ) || (isset($vv['channle_add_price']) && $vv['channle_add_price'] == "" ))){
                                //有记录,传过来空值，删除该条记录
                                $custlevelPrice->delete($vv['sku_sale_price_id']);
                            }
                        }

                    }
                    //插入供货商定价
                    if ($v['supplier_price']){
                        $supplerPriceArr = json_decode($v['supplier_price'],true);

                        foreach ($supplerPriceArr as $kk=>$vv){
                            if ((isset($vv['start_price']) && $vv['start_price'] !== "" ) || (isset($vv['add_price']) && $vv['add_price'] !== "" ))
                            {
                                $supplerPriceArrIn = [];
                                $supplerPriceArrIn['mch_id'] = $postArr['mch_id'];
                                $supplerPriceArrIn['prod_sku_id'] = $skuId;
                                $supplerPriceArrIn['sup_id'] = $vv['sup_id'];
                                $supplerPriceArrIn['sku_sup_price'] = $vv['start_price']??0;
                                $supplerPriceArrIn['addp_price'] = $vv['add_price']??0;

                                if ($supplerPriceArrIn['sku_sup_price'] == ""){
                                    $supplerPriceArrIn['sku_sup_price'] = 0;
                                }
                                if ($supplerPriceArrIn['addp_price'] == ""){
                                    $supplerPriceArrIn['addp_price'] = 0;
                                }
                                if ($vv['sku_sup_price_id'] != "") {
                                    //更改
                                    $supplerPriceArrIn['updated_at'] = time();
                                    //hlt
                                    $supPrice->update(['sku_sup_id' => $vv['sku_sup_price_id']], $supplerPriceArrIn);
                                } else {
                                    //新增
                                    $supplerPriceArrIn['created_at'] = time();
                                    $supPrice->insert($supplerPriceArrIn);
                                }
                            }else if ($vv['sku_sup_price_id'] != "" && ((isset($vv['start_price']) && $vv['start_price'] == "" ) || (isset($vv['add_price']) && $vv['add_price'] == "" ))){
                                //有记录,传过来空值，删除该条记录
                                $supPrice->delete($vv['sku_sup_price_id']);
                            }
                        }

                    }

                }


            }else{
                //sku
                //先将属性插进商品属性关联表，再插入sku表

                foreach ($postArr['prod_sku_arr'] as $k=>$v)
                {

                    $relaCombId = [];
                    $attrValueArr = explode(',',$v['attr_id']);
                    //获取对应的父级属性（这里的PAGE_ID用与取出p数对应的数字用于存进sku表）
                    $attrArr = $attrValue->getAttrArr($attrValueArr,PAGE_ID);
                    //写进商品属性关联表
                    foreach ($attrArr as $kk=>$vv){
                        //查询关联属性表是否有这关联属性，有则不用插入
                        $relationId = $relationAttr->getRelationId(['product_id'=>$productId,'attr_id' =>$vv['attr_id'],'attr_val_id' =>$vv['attr_value_id'] ]);
                        if (!$relationId)
                        {
                            $relationArr = [];
                            $relationArr['product_id'] = $productId;
                            $relationArr['attr_id']  = $vv['attr_id'];
                            $relationArr['attr_val_id']  = $vv['attr_value_id'];
                            $relationArr['created_at']  = time();
                            //判断是否为p数属性
                            if ($vv['is_p']){
                                //将p数存进该条sku数据中
                                $postArr['prod_sku_arr'][$k]['p_value'] = $vv['p_value'];
                            }
                            //插入商品属性关联表并收集id便于插入sku表
                            //插入商品属性表
                            //判断是否有关联属性表是否有这id
                            $isSetRelation = $relationAttrModel->where(['product_id' => $productId,'attr_id' => $vv['attr_id'],'attr_val_id' => $vv['attr_value_id']])->first();
                            if (empty($isSetRelation))
                            {
                                //插入商品属性表
                                $relationId = $relationAttrModel->insertGetId($relationArr);
                            }else{
                                $relationId = $isSetRelation['rel_attr_id'];
                            }
                        }
                        $relaCombId[] = $relationId;

                    }
                    asort($relaCombId);
                    //把商品关联属性id数组转成字符串
                    $relationId = implode(',',$relaCombId);

                    //插入sku表

                    $prodSku = [];
                    $prodSku['prod_id']                 = $productId;
                    $prodSku['prod_attr_comb']          = $relationId;
                    $prodSku['prod_sku_sn']             = $v['prod_sku_sn'];
                    $prodSku['prod_sku_price']          = $v['prod_sku_price'];
                    $prodSku['prod_sku_cost']           = $v['prod_sku_cost'];
                    $prodSku['prod_sku_weight']         = $v['prod_sku_weight'];
                    $prodSku['prod_min_photo']          = $v['prod_min_photo'];
                    $prodSku['prod_max_photo']          = $v['prod_max_photo'];
                    $prodSku['prod_supplier_sn']        = $v['prod_supplier_sn'];
                    $prodSku['prod_sku_addp_info']      = $v['prod_sku_addp_info'];
                    if ($postArr['is_personal_printing'])
                    {
                        $prodSku['prod_spine_thickness']    = $v['prod_spine_thickness']?$v['prod_spine_thickness']:0;
                    }
                    $prodSku['prod_sku_onsale_status']  = $v['sku_onsale'];
                    $prodSku['prod_p_num']              = $postArr['prod_sku_arr'][$k]['p_value']??0;


                    //插入商品sku表 并获取skuid waiting
                    if ($v['sku_id']!="")
                    {
                        //更改数据
                        $prodSku['updated_at']              = time();
                        //hlt
                        $repoSku->update(['prod_sku_id' =>$v['sku_id'] ],$prodSku);
                        $skuId = $v['sku_id'];
                    }else{
                        //插入数据
                        $prodSku['created_at']              = time();
                        $skuId = $repoSku->insertGetId($prodSku);
                    }
                    //判断是否需要更新商户关联商品的属性
                    $this->changeMchAttr($skuId,$productId);



                    //插入销售渠道定价
                    if ($v['sale_channle_price']){
                        $saleChannleArr = json_decode($v['sale_channle_price'],true);

                        foreach ($saleChannleArr as $kk=>$vv){
                            if ((isset($vv['channle_price']) && $vv['channle_price'] !== "" ) || (isset($vv['channle_add_price']) && $vv['channle_add_price'] !== "" ))
                            {

                                $saleChannleArrIn = [];
                                $saleChannleArrIn['mch_id'] = $postArr['mch_id'];
                                $saleChannleArrIn['prod_sku_id'] = $skuId;
                                $saleChannleArrIn['cha_id'] = $vv['channle_id'];
                                $saleChannleArrIn['cust_lv_id'] = $vv['customer_id'];
                                $saleChannleArrIn['sku_cust_lv_price'] = $vv['channle_price']??0;
                                $saleChannleArrIn['addp_price'] = $vv['channle_add_price']??0;
                                if ($saleChannleArrIn['sku_cust_lv_price'] == ""){
                                    $saleChannleArrIn['sku_cust_lv_price'] = 0;
                                }
                                if ($saleChannleArrIn['addp_price'] == ""){
                                    $saleChannleArrIn['addp_price'] = 0;
                                }


                                if ($vv['sku_sale_price_id']!="")
                                {
                                    //更改数据
                                    $saleChannleArrIn['updated_at']              = time();
                                    //hlt
                                    $custlevelPrice->update(['sku_cust_lv_id' =>$vv['sku_sale_price_id'] ],$saleChannleArrIn);
                                }else{
                                    //插入数据 hlt
                                    $saleChannleArrIn['created_at'] = time();
                                    $custlevelPrice->insert($saleChannleArrIn);
                                }

                            }else if ($vv['sku_sale_price_id'] != "" && ((isset($vv['channle_price']) && $vv['channle_price'] == "" ) || (isset($vv['channle_add_price']) && $vv['channle_add_price'] == "" ))){
                                //有记录,传过来空值，删除该条记录
                                $custlevelPrice->delete($vv['sku_sale_price_id']);
                            }

                        }

                    }

                    //插入供货商定价
                    if ($v['supplier_price']){
                        $supplerPriceArr = json_decode($v['supplier_price'],true);

                        foreach ($supplerPriceArr as $kk=>$vv){
                            if ((isset($vv['start_price']) && $vv['start_price'] !== "" ) || (isset($vv['add_price']) && $vv['add_price'] !== "" ))
                            {

                                $supplerPriceArrIn = [];
                                $supplerPriceArrIn['mch_id'] = $postArr['mch_id'];
                                $supplerPriceArrIn['prod_sku_id'] = $skuId;
                                $supplerPriceArrIn['sup_id'] = $vv['sup_id'];
                                $supplerPriceArrIn['sku_sup_price'] = $vv['start_price']??0;
                                $supplerPriceArrIn['addp_price'] = $vv['add_price']??0;
                                if ($supplerPriceArrIn['sku_sup_price'] == ""){
                                    $supplerPriceArrIn['sku_sup_price'] = 0;
                                }
                                if ($supplerPriceArrIn['addp_price'] == ""){
                                    $supplerPriceArrIn['addp_price'] = 0;
                                }



                                if ($vv['sku_sup_price_id']!=""){
                                    //更改
                                    $supplerPriceArrIn['updated_at']              = time();
                                    //hlt
                                    $supPrice->update(['sku_sup_id' =>$vv['sku_sup_price_id'] ],$supplerPriceArrIn);

                                }else{
                                    //新增
                                    $supplerPriceArrIn['created_at'] = time();
                                    $supPrice->insert($supplerPriceArrIn);
                                }

                            }else {

                                if ($vv['sku_sup_price_id'] != "" && ((isset($vv['start_price']) && $vv['start_price'] == "") || (isset($vv['add_price']) && $vv['add_price'] == ""))) {
                                    //有记录,传过来空值，删除该条记录
                                    $supPrice->delete($vv['sku_sup_price_id']);
                                }
                            }



                        }

                    }




                }


            }

            \DB::commit();
            return true;
        } catch (CommonException $e) {
            \DB::rollBack();
            return [
                'code' => 0,
                'msg'  => $e->getMessage()

            ];
        }


    }

    //比较不同
    public function checkDiff($pastArr,$nowArr)
    {
        $data['del'] = [];
        foreach ($pastArr as $k =>$v)
        {
            if (!in_array($v,$nowArr))
            {
                //不存在当前的数组，即视为不同，可删除
                $data['del'][$k] = $v;

            }
        }
        $data['add'] = [];
        foreach ($nowArr as $k=>$v)
        {
            if (!in_array($v,$pastArr))
            {
                //不存在过去的数组，即视为不同，可添加
                $data['add'][] = $v;

            }
        }
        return $data;
    }

    //获取标准商品列表
    public function getStandardList($search)
    {
        $limit = 12;
        $search = $search['search'];
        $offset = ($search['page'] -1)*$limit;


        DB::connection()->enableQueryLog();
        $where['saas_products.mch_id'] = PUBLIC_CMS_MCH_ID;
        $where['saas_products.prod_onsale_status'] = 1;
        if (isset($search['cate_id'])&&$search['cate_id']!="")
        {
            $where['saas_products.prod_cate_uid'] = $search['cate_id'];
        }
        if (isset($search['size_id'])&&$search['size_id']!="")
        {
            $where['saas_products_print.prod_size_id'] = $search['size_id'];
        }
        if (isset($search['product_name'])&&$search['product_name']!="")
        {
            $where['saas_products.prod_name'] = $search['product_name'];
        }
        /*$query = $this->model->with('printAttach');*/
        $query = $this->model
                ->leftJoin('saas_products_print', 'saas_products.prod_id', '=', 'saas_products_print.prod_id');

        if(!empty ($where)) {
            $query =  $query->where($where);
        }

        $listArr = $query->offset($offset)->limit($limit)->select('saas_products.*','saas_products_print.prod_size_id')->get()->toArray();

        $list['data'] = $listArr;

        $list['total'] = $this->model->leftJoin('saas_products_print', 'saas_products.prod_id', '=', 'saas_products_print.prod_id')->where($where)->count();
        //将id取出来作为新数组
        $prodArr = array_column($list['data'],'prod_id','prod_id');

        //取出商品对应的媒体数据
        $mediaArr = $this->modelMedia->where(['prod_md_ismain' => 1])->whereIn('prod_id',$prodArr)->orderBy('sort','asc')->get()->groupBy("prod_id")->toArray();

        foreach ($list['data'] as $k=>$v)
        {

            if (isset($mediaArr[$v['prod_id']]) && isset($mediaArr[$v['prod_id']][0]))
            {
                $list['data'][$k]['prod_main_thumb'] = $mediaArr[$v['prod_id']][0]['prod_md_path'];
            }else{
                $list['data'][$k]['prod_main_thumb'] = "";
            }

        }



        return $list;



    }

    //添加商户标准商品
    public function addStandardNewProduct($prodId,$mid)
    {
        $infoService = app(Info::class);
        try {

            \DB::beginTransaction();
            foreach ($prodId as $k=>$v)
            {
                //hlt
                //商品表
                $old_good = $this->model->where(['prod_id' => $v])->first()->toArray();

                $old_good['mch_id'] = $mid;
                $old_good['created_at'] = time();

                $old_good['parent_prod_id'] = $old_good['prod_id'];
                unset($old_good['prod_id']);
                unset($old_good['updated_at']);
                unset($old_good['deleted_at']);
                //插入商品表
                $newGoodId = $this->model->insertGetId($old_good);
                //商品媒体表
                $mediaModel = app(SaasProductsMedia::class);
                $oldProductMedia = $mediaModel->where(['prod_id' => $v])->get()->toArray();
                foreach ($oldProductMedia as $kk=>$vv)
                {
                    //插入媒体表
                    $vv['prod_id'] = $newGoodId;
                    $vv['created_at'] = time();
                    unset($vv['prod_md_id']);
                    unset($vv['updated_at']);
                    unset($vv['deleted_at']);
                    $mediaModel->insert($vv);
                }
                //商品对应渠道表
                $pChannleModel = app(SaasProductsChanle::class);
                $oldPChannle  = $pChannleModel->where(['prod_id' => $v])->get()->toArray();
                foreach ($oldPChannle as $kk => $vv)
                {
                    //商品对应渠道表
                    $vv['prod_id'] = $newGoodId;
                    $vv['mch_id'] = $mid;
                    $vv['created_at'] = time();
                    unset($vv['prod_cha_id']);
                    unset($vv['updated_at']);
                    unset($vv['deleted_at']);
                    $pChannleModel->insert($vv);
                }

                //商品对应渠道的用户等级表
                $pTCustLevelModel = app(SaasProdToCustLevel::class);
                $oldCustLevel = $pTCustLevelModel->where(['prod_id' => $v])->get()->toArray();
                foreach ($oldCustLevel as $kk => $vv)
                {
                    //商品对应渠道的用户等级表
                    $vv['prod_id'] = $newGoodId;
                    $vv['mch_id'] = $mid;
                    $vv['created_at'] = time();
                    unset($vv['ptc_lv_id']);
                    unset($vv['updated_at']);
                    unset($vv['deleted_at']);
                    $oldCustLevel->insert($vv);
                }

                //商品自定义规格
                $customSizeModel = app(SaasSizeInfo::class);
                $oldCustomSize = $customSizeModel->where(['goods_id' => $v])->get()->toArray();
                foreach ($oldCustomSize as $kk =>$vv){
                    //商品自定义规格
                    $vv['goods_id'] = $newGoodId;
                    $vv['created_at'] = time();
                    unset($vv['size_info_id']);
                    unset($vv['updated_at']);
                    unset($vv['deleted_at']);
                    $customSizeModel->insert($vv);
                }



                //商品对应供货商表
                $pSupplierModel = app(SaasProdSuppliers::class);
                $oldSupplier = $pSupplierModel->where(['prod_id' => $v])->get()->toArray();
                foreach ($oldSupplier as $kk => $vv)
                {
                    //商品对应供货商表
                    $vv['prod_id'] = $newGoodId;
                    $vv['created_at'] = time();
                    unset($vv['prod_sup_id']);
                    unset($vv['updated_at']);
                    unset($vv['deleted_at']);
                    $pSupplierModel->insert($vv);
                }
                //商品印刷表
                $printModel = app(SaasProductsPrint::class);
                $oldPrint = $printModel->where(['prod_id' => $v])->get()->toArray();
                foreach ($oldPrint as $kk => $vv)
                {
                    //商品对应供货商表
                    $vv['prod_id'] = $newGoodId;
                    $vv['mch_id'] = $mid;
                    $vv['created_at'] = time();
                    unset($vv['prod_pt_id']);
                    unset($vv['updated_at']);
                    unset($vv['deleted_at']);
                    $printModel->insert($vv);
                }
                //商品属性关联表
                $relationModel = app(SaasProductsRelationAttr::class);
                /*$oldRelation = $relationModel->where(['product_id' => $v])->get()->toArray();
                $newRelationIdArr = [];
                foreach ($oldRelation as $kk => $vv)
                {
                    //商品属性关联表
                    $vv['product_id'] = $newGoodId;
                    $vv['created_at'] = time();
                    unset($vv['rel_attr_id']);
                    unset($vv['updated_at']);
                    unset($vv['deleted_at']);
                    $newRelationIdArr[] = $relationModel->insertGetId($vv);
                }
                //把商品关联属性id数组转成字符串,用于插入sku
                $newRelationId = implode(',', $newRelationIdArr);*/

                //sku表
                $skuModel = app(SaasProductsSku::class);
                $channlePriceModel = app(SaasSkuToCustlevelPrice::class);
                $supPriceModel = app(SaasSkuSupPrice::class);
                $oldSku = $skuModel->where(['prod_id' => $v])->get()->toArray();
                foreach ($oldSku as $kk => $vv)
                {
                    $oldSkuId = $vv['prod_sku_id'];
                    if ($vv['prod_attr_comb']!="")
                    {
                        $newRelationIdArr = [];
                        $relaArr = explode(",",$vv['prod_attr_comb']);
                        $oldRelation = $relationModel->whereIn('rel_attr_id',$relaArr)->get()->toArray();
                        foreach ($oldRelation as $ko => $vo)
                        {
                            //判断是否有关联属性表是否有这id
                            $isSetRelation = $relationModel->where(['product_id' => $newGoodId,'attr_id' => $vo['attr_id'],'attr_val_id' => $vo['attr_val_id']])->first();
                            if (empty($isSetRelation))
                            {
                                //商品属性关联表
                                $vo['product_id'] = $newGoodId;
                                $vo['created_at'] = time();
                                unset($vo['rel_attr_id']);
                                unset($vo['updated_at']);
                                unset($vo['deleted_at']);
                                //插入商品属性表
                                $relationId = $relationModel->insertGetId($vo);
                            }else{
                                $relationId = $isSetRelation['rel_attr_id'];
                            }
                            $newRelationIdArr[] = $relationId;
                        }
                        //把商品关联属性id数组转成字符串,用于插入sku
                        $newRelationId = implode(',', $newRelationIdArr);
                    }else{
                        $newRelationId = "";
                    }

                    //sku表
                    $vv['prod_id'] = $newGoodId;
                    $vv['created_at'] = time();
                    $vv['prod_attr_comb'] = $newRelationId;
                    unset($vv['prod_sku_id']);
                    unset($vv['updated_at']);
                    unset($vv['deleted_at']);
                    $newSkuId = $skuModel->insertGetId($vv);

                    //销售渠道定价表
                    $oldCusPrice = $channlePriceModel->where(['prod_sku_id' => $oldSkuId])->get()->toArray();

                    foreach ($oldCusPrice as $ko =>$vo)
                    {
                        //销售渠道定价表
                        $vo['mch_id'] = $mid;
                        $vo['created_at'] = time();
                        $vo['prod_sku_id'] = $newSkuId;
                        unset($vo['sku_cust_lv_id']);
                        unset($vo['updated_at']);
                        unset($vo['deleted_at']);
                        $channlePriceModel->insert($vo);
                    }

                    //供货商定价
                    $oldSupPrice = $supPriceModel->where(['prod_sku_id' => $oldSkuId])->get()->toArray();
                    foreach ($oldSupPrice as $ko => $vo)
                    {
                        //供货商定价
                        $vo['mch_id'] = $mid;
                        $vo['created_at'] = time();
                        $vo['prod_sku_id'] = $newSkuId;
                        unset($vo['sku_sup_id']);
                        unset($vo['updated_at']);
                        unset($vo['deleted_at']);
                        $supPriceModel->insert($vo);
                    }
                }
                //cms的商品配置
                try {
                    $infoService->syncCmsCompoundSettingToOms($newGoodId);
                }catch (CommonException $e){

                }
            }
           \DB::commit();
            return true;
        } catch (CommonException $e) {
            \DB::rollBack();
            return [
                'code' => 0,
                'msg'  => $e->getMessage()

            ];
        }


    }


    //获取销售渠道与用户等级列表（商户后台）
    public function getChannleList($mid)
    {
        $channleRepositories = app(SaasSalesChanelRepository::class);
        $res = $channleRepositories->getCustomerChannleList($mid);
        return $res;
    }

    //保存自定义规格
    public function customSizeSave($data)
    {

        $infoModel = app(SaasSizeInfo::class);
        try {

            \DB::beginTransaction();

            foreach ($data['page_type'] as $k => $v)
            {
                $sizeInfoArr =[
                    'size_design_w'        => $data['specificationsParam']['size_design_w'][$v],
                    'size_design_h'        => $data['specificationsParam']['size_design_h'][$v],
                    'size_location_top'    => $data['specificationsParam']['size_location_top'][$v],
                    'size_location_left'   => $data['specificationsParam']['size_location_left'][$v],
                    'size_location_bottom' => $data['specificationsParam']['size_location_bottom'][$v],
                    'size_location_right'  => $data['specificationsParam']['size_location_right'][$v],
                    'size_tip_top'         => $data['specificationsParam']['size_tip_top'][$v],
                    'size_tip_bottom'      => $data['specificationsParam']['size_tip_bottom'][$v],
                    'size_tip_left'        => $data['specificationsParam']['size_tip_left'][$v],
                    'size_tip_right'       => $data['specificationsParam']['size_tip_right'][$v],
                    'size_cut_top'         => $data['specificationsParam']['size_cut_top'][$v],
                    'size_cut_bottom'      => $data['specificationsParam']['size_cut_bottom'][$v],
                    'size_cut_left'        => $data['specificationsParam']['size_cut_left'][$v],
                    'size_cut_right'       => $data['specificationsParam']['size_cut_right'][$v],
                ];
                //数据验证
                $check = $this->checkInfoData($sizeInfoArr);
                if ($check['code'] == 0){
                    $data = [
                        'code' => 0,
                        'msg' => $check['msg']
                    ];
                    \DB::rollBack();
                    return $data;
                }
                $sizeInfoArr['size_is_cross']   = $data['specificationsParam']['size_is_cross'][$v];
                $sizeInfoArr['size_is_2faced']  = $data['specificationsParam']['size_is_2faced'][$v];
                $sizeInfoArr['size_is_display'] = $data['specificationsParam']['size_is_display'][$v];
                $sizeInfoArr['size_is_output']  = $data['specificationsParam']['size_is_output'][$v];
                $sizeInfoArr['size_is_locked']  = $data['specificationsParam']['size_is_locked'][$v];

                //获取原商品规格的dpi
                $sizeInfoArr['size_info_dpi'] = $infoModel->where(['goods_id' => ZERO,'size_id' => $data['size_id'],'size_type'=>$v])->value('size_info_dpi');

                //查看有没有数据
                $isSet = $infoModel->where(['goods_id' => $data['prod_id'],'size_id' => $data['size_id'],'size_type'=>$v])->get()->toArray();

                if (empty($isSet))
                {
                    //新增
                    //新增详情数据
                    $sizeInfoArr['size_type']  = $v;
                    $sizeInfoArr['size_id'] = $data['size_id'];
                    $sizeInfoArr['goods_id'] = $data['prod_id'];

                    $sizeInfoArr['created_at'] = time();
                    $infoModel->insert($sizeInfoArr);
                }else{
                    //更新
                    $sizeInfoArr['updated_at'] = time();
                    //更新详情数据
                    $infoModel->where(['size_info_id' => $data['specificationsParam']['size_info_id'][$v]])->update($sizeInfoArr);
                }

            }
            \DB::commit();
            $ret = [
                'code' => 1,
                'msg' => 'ok',
            ];
            return $ret;
        } catch (CommonException $e) {

            \DB::rollBack();
            $ret = [
                'code' => 0,
                'msg'  => $e->getMessage()

            ];
            return $ret;
        }

    }
    //验证规格详情数据
    public function checkInfoData($array)
    {
        foreach ($array as $k=>$v)
        {
            if (!$v){
                //非空验证
                $data = [
                    'code' => 0,
                    'msg'  => "请填写完整参数",
                ];
                return $data;
            }
            if (!is_numeric($v)){
                //数字验证
                $data = [
                    'code' => 0,
                    'msg'  => "参数必须为数字",
                ];
                return $data;
            }
        }

        $data=[
            'code' => 1,
            'msg'  => 'ok'
        ];
        return $data;


    }
    //将商品加入购物车，这里只针对实物
    public function addCart($sku_id,$cha_id,$num)
    {
        //组织数据
        $agent_info_id = session("admin")['agent_info_id'];
        $data = [
            'user_id' => $agent_info_id,//用户id
            'cha_id'  => $cha_id,//渠道id
            'cart_info' => [
                [
                    'projects_id' => 0, //作品id 没有则传0
                    'sku_id' => $sku_id,      //skuid
                    'num'    => $num         //商品数量
                ]
            ]
        ];
        $cartRepository = app(SaasCartRepository::class);
        $res = $cartRepository->addCartGoods($data);
        if ($res){
            return true;
        }else{
            return false;
        }


    }

    //获取商家的标准化商品数目跟自定义商品数目
    public function getMerchantProductsCount($mid = null)
    {
        $productArr = $this->model;
        if (!is_null($mid) && !is_array($mid))
        {
            $midArr = explode(',',$mid);
            $productArr = $productArr->whereIn('mch_id',$midArr);
        }

        $productArr = $productArr->select('prod_id','prod_cate_uid','parent_prod_id')->get()->toArray();
        //标准化商品
        $standardCount['print_count'] = 0;
        $standardCount['entity'] = 0;
        //自定义商品
        $customCount['print_count'] = 0;
        $customCount['entity'] = 0;
        $categoryModel = app(SaasCategory::class);
        //印品分类id
        $printerId = $categoryModel->where(['cate_flag'=>GOODS_MAIN_CATEGORY_PRINTER,'cate_level' => CATEGORY_NO_ONE])->value('cate_id');
        //实物分类id
        $entityId = $categoryModel->where(['cate_flag'=>GOODS_MAIN_CATEGORY_ENTITY,'cate_level' => CATEGORY_NO_ONE])->value('cate_id');


        foreach ($productArr as $k => $v)
        {
            //获取商品上级分类id
            $parentCateId = $categoryModel->where('cate_id',$v['prod_cate_uid'])->value('cate_all_parent');
            $parentCateId = explode(',',$parentCateId);
            if ($v['parent_prod_id']){
                //标准化商品
                if (in_array($printerId,$parentCateId))
                {
                    //标准化商品 印品
                    $standardCount['print_count']++;
                }elseif (in_array($entityId,$parentCateId))
                {
                    //标准化商品 实物
                    $standardCount['entity']++;
                }
            }else{
                //自定义商品
                if (in_array($printerId,$parentCateId))
                {
                    //自定义商品 印品
                    $customCount['print_count']++;
                }elseif (in_array($entityId,$parentCateId))
                {
                    //自定义商品 实物
                    $customCount['entity']++;
                }
            }
        }
        $data = [
            'standardCount' => $standardCount,
            'customCount' => $customCount
        ];
        return $data;

    }

    /**
     * 查看该商品是否是冲印并且是增减P
     * Date: 2020/7/7
     * Time: 14:43
     * @param $prod_id
     * @return array
     */
    public function isSingle($prod_id)
    {
        $prod = $this->model->where(['prod_id'=>$prod_id])->select("prod_cate_uid")->first();
        if(!empty($prod)){
            $cate = $this->categoryModel->where(['cate_id'=>$prod['prod_cate_uid']])->select('cate_flag')->first();
            $print = $this->modelProdPrint->where(['prod_id'=>$prod_id])->select('prod_pt_variable')->first();
            if(($cate['cate_flag']=="single" && empty($print))|| empty($cate)){
                $data = [
                    'status'=>false,
                    'msg'=>"找不到对应的商品信息"
                ];
                return $data;
            }else{
                $data = [
                    'status'=>true,
                    'flag'=>$cate['cate_flag'],
                    'pt'=>$print['prod_pt_variable']
                ];
                return $data;
            }
        }else{
            $data = [
                'status'=>false,
                'msg'=>"找不到对应的商品信息"
            ];
            return $data;
        }



    }

    /**
     * 获取商品简称 :没有简称就返回全称
     * @param $prod_id
     * @return string
     */
    public function getProductAbbr($prod_id)
    {
        $prodInfo = $this->model->where(['prod_id'=>$prod_id])->select("prod_id","prod_name","prod_abbr")->first();
        if($prodInfo['prod_abbr']){
            return $prodInfo['prod_abbr'];
        }else{
            return $prodInfo['prod_name'];
        }

    }


    /**
     * 获取相对应分类的商品
     * $params $prod_cate_uid 分类id
     *         $mch_id 商家id
     *         $num  数量
     * $return $products_list 同分类下的商品
     * use_address:Agent/Goods/ListController
     *             Agent/Goods/CategoryController
     */
    public function getProductsCollect($whereIn)
    {

        $list = $this->model->whereIn('prod_id',$whereIn)->where(['prod_onsale_status'=>1])->orderBy('prod_sale_num','desc')->orderBy('prod_id','desc')->get();

        $products_list = json_decode($list,true);

        foreach ($products_list as $key=>$val){
            /*//当商品名字过长时
            if(mb_strlen($val['prod_name'])>8){
                $products_list[$key]['prod_name'] = mb_substr($val['prod_name'],0,8)."...";
            }else{
                $products_list[$key]['prod_name'] = mb_substr($val['prod_name'],0,8);
            }
            //当商品标题过长时
            if(mb_strlen($val['prod_title'])>13){
                $products_list[$key]['prod_title'] = mb_substr($val['prod_title'],0,13)."...";
            }else{
                $products_list[$key]['prod_title'] = mb_substr($val['prod_title'],0,13);
            }*/
            //获取商品对应的图片
            $prod_main_thumb = $this->mediaRepository->getProductPhoto($val['prod_id']);
            //得到商品的主图，默认为第一张图片
            $products_list[$key]['prod_main_thumb'] = $prod_main_thumb[0]['prod_md_path'];
            //得到商品的相册
            foreach ($prod_main_thumb as $k=>$v){
                $products_list[$key]['prod_photos'][$k] = $v['prod_md_path'];
            }
        }
        return $products_list;
    }

    public function changeMchAttr($skuId,$productId)
    {
        //hlt1
        $skuModel = app(SaasProductsSku::class);
        $relationAttrModel = app(SaasProductsRelationAttr::class);
        //判断所属商品是否为大后台商品
        $isCmsProduct = $this->model->where('prod_id',$productId)->value('mch_id');
        if ($isCmsProduct == 0){
            //大后台商品，需要关联改变子商品同一sku的相关属性
            $skuInfo = $skuModel->where('prod_sku_id',$skuId)->first();
            //获取对应子商品
            $childProduct = $this->model->where('parent_prod_id',$productId)->pluck('prod_id');
            if (!empty($skuInfo)){
                //获取sku属性
                $prod_attr_comb = $skuInfo['prod_attr_comb'];

                if (empty($prod_attr_comb)){
                    //spu商品
                    //组织需修改的属性
                    $uData = [
                        'prod_sku_sn' => $skuInfo['prod_sku_sn'],
                        'prod_sku_cost'=>$skuInfo['prod_sku_cost'],
                        'prod_sku_weight'=>$skuInfo['prod_sku_weight'],
                        'prod_supplier_sn'=>$skuInfo['prod_supplier_sn'],
                        'prod_spine_thickness'=>$skuInfo['prod_spine_thickness'],
                    ];
                    $skuModel->whereIn('prod_id',$childProduct)->update($uData);
                }else{
                    //sku商品
                    $attrArr = explode(',',$prod_attr_comb);
                    $allComb = [];
                    foreach ($attrArr as $k=>$v)
                    {
                        $attrInfo = $relationAttrModel->where('rel_attr_id',$v)->select('attr_id','attr_val_id')->first();
                        if (!empty($attrInfo))
                        {
                          //获取各个商品下的该属性的数组
                          $combArr = $relationAttrModel->whereIn('product_id',$childProduct)->where(['attr_id' => $attrInfo['attr_id'],'attr_val_id'=>$attrInfo['attr_val_id']])->select('product_id','rel_attr_id','attr_id','attr_val_id')->get()->groupBy('product_id')->toArray();
                          if (!empty($allComb)){
                                foreach ($combArr as $kk => $vv){
                                    if (isset($allComb[$kk])){
                                        //丰富数组，最后得到该sku所属的商品的兄弟商品对应此sku的属性集合
                                        $allComb[$kk][] = $vv[0];
                                    }
                                }
                          }else{
                              $allComb = $combArr;
                          }
                        }
                    }
                    $skuCombArr = [];
                    foreach ($allComb as $k=>$v){
                        //将各个商品的对应属性组织起来准备对比
                        foreach ($v as $kk=>$vv){
                            $skuCombArr[$k][] = $vv['rel_attr_id'];
                        }
                    }
                    //查询sku表改关联属性
                    foreach ($skuCombArr as $k => $v){
                        asort($v);
                        //把商品关联属性id数组转成字符串
                        $relationId = implode(',',$v);
                        //组织需修改的属性
                        $uData = [
                            'prod_sku_sn' => $skuInfo['prod_sku_sn'],
                            'prod_sku_cost'=>$skuInfo['prod_sku_cost'],
                            'prod_sku_weight'=>$skuInfo['prod_sku_weight'],
                            'prod_supplier_sn'=>$skuInfo['prod_supplier_sn'],
                            'prod_spine_thickness'=>$skuInfo['prod_spine_thickness'],
                        ];
                        $skuModel->where(['prod_attr_comb' => $relationId,'prod_id'=>$k])->update($uData);
                    }
                }
            }
        }
    }




}
