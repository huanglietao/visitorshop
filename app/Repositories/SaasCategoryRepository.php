<?php
namespace App\Repositories;
use App\Models\SaasCategory;
use App\Models\SaasProducts;
use App\Services\Helper;
use App\Services\Tree;
use Illuminate\Support\Facades\DB;

/**
 * 仓库模板
 * 仓库模板
 * @author:
 * @version: 1.0
 * @date:
 * .dai 修改获取素材和背景分类下的数据
 */
class SaasCategoryRepository extends BaseRepository
{

    protected $isCache = true; //是否使用缓存

    public function __construct(SaasCategory $model)
    {
        $this->model =$model;

    }
    //获取列表 by hlt
    public function getList($where=[], $order='created_at', $sort = "desc")
    {
        return parent::getList($where, $order, $sort); // TODO: Change the autogenerated stub
    }

    /**
     * @param null $where
     * @param null $order
     * @return mixed
     */
    public function getTableList($where=null, $order=null)
    {
        $limit = "9999999999";  //分类先不做分页

        $where = $this->parseWhere($where);


        //order 必须以 'id desc'这种方式传入.
        $orderBy = [];
        if (!empty ($order)) {
            $arrOrder = explode(' ', $order);
            if(count($arrOrder) == 2) {
                $orderBy = $arrOrder;
            }
        }



        $query = $this->model;

        if(!empty ($where)) {
            $query =  $query->where($where);
        }


        if(!empty($order)) {
            $query =  $query->orderBy($orderBy[0],$orderBy[1]);
        }

        $list = $query->paginate($limit);

        return $list;
    }


    /**
     * 新增/修改
     * @param $data
     * @return boolean
     */
    public function save($data)
    {

        if(empty($data['id'])) {
            unset($data['id']);

            $ret = $this->model->insertGetId($data);
            $priKeyValue = $ret;

        } else {
            $priKeyValue = $data['id'];
            $data['updated_at'] =time();
            //判断父类是否选择了自身
            if($data['cate_parent_id']==$data['id']){
                return ['code' => 0,'msg'=>'父类不能选择本身'];
            }

            unset($data['id']);
            $ret =$this->model->where('cate_id',$priKeyValue)->update($data);
        }

        //判断是否需要更新缓存
        if (isset($this->isCache)&&$this->isCache === true){
            $table_name = $this->model->getTable();
            $redis = app('redis.connection');
            $data['cate_id'] = $priKeyValue;
            $redis->set($table_name.'_'.$priKeyValue , json_encode($data));
        }
        return $ret;

    }

    /**
     * 删除(软删除)
     * @param $id
     * @return bool
     */
    public function delete($id)
    {
        $model = $this->model->find($id);
        $model->delete();

        //删除缓存数据
        //判断是否需要更新缓存
        if (isset($this->isCache)&&$this->isCache === true){
            $table_name = $this->model->getTable();
            $redis = app('redis.connection');
            $data['cate_id'] = $id;
            //将客户单号写进redis
            $redis->del($table_name.'_'.$id);
        }

        if($model->trashed()){
            return true;
        }else{
            return true;
        }
    }

    //树级无限级分类
    public function getTreeList($array=[],$pidname='cate_parent_id',$table_id='cate_id',$name='cate_name')
    {
        $tree = new Tree();
        //组合无限极分类
        $tree::instance()->init($array,$pidname,$table_id);

        $categoryList = $tree::instance()->getTreeList($tree::instance()->getTreeArray(0), $name);
        return $categoryList;
    }

    //取出父级名称
    public function getParentList($array)
    {
        foreach ($array as $k=>$v){
            if ($v['cate_parent_id']!=0){
                $array[$k]['cate_parent_value'] = $this->model->where(['cate_id' => $v['cate_parent_id']])->value('cate_name');
            }else{
                $array[$k]['cate_parent_value'] = "无";
            }
        }
        return $array;

    }

    //获取类目名称
    public function getTypeArr($type)
    {
        $data = $this->model->where(['cate_uid' => $type])->get()->toArray();
        if (!empty($data)){
            //树级分类
            $data = $this->getTreeList($data);
        }

        $array = [];
        foreach ($data as $k=>$v){
            $array[$v['cate_id']] = $v['cate_name'];
        }
        return $array;
    }

    //获取父级分类id字符串
    public function getParentId($id,$type)
    {
        $categoryArr = $this->model->where(['cate_uid' => $type])->get()->toArray();

        $tree = new Tree();
        //组合无限极分类
        $tree::instance()->init($categoryArr,'cate_parent_id','cate_id');

        $categoryList = $tree::instance()->getParents($id);
        $arr = [];
        foreach ($categoryList as $k=>$v){
            $arr[] = $v['cate_id'];
        }
        $arr[] = $id;
        $str = implode(",",$arr);

        return $str;
    }

    //获取类目所有数据
    public function getTList($type)
    {
        $categoryArr = $this->model->where(['cate_uid' => $type])->get()->toArray();
        return $categoryArr;
    }
    //当前类目等级
    public function getLevel($str)
    {
        $level = 1;
        if ($str != '0'){
            $levelArr = explode(',',$str);
            $level = count($levelArr) + 1;
        }
        return $level;
    }

    //获取某个等级下的分类数据
    public function getCategoryList($value="",$level=CATEGORY_NO_ONE,$parent_level="",$cate_uid="goods")
    {
        if (!$parent_level){
            $parent_level = "";
        }
        $categoryArr = $this->model->where('cate_name', 'like', '%'.$value.'%')->where(['cate_level' => $level,'cate_uid' => $cate_uid,'cate_all_parent'=>$parent_level])->get()->toArray();
        return $categoryArr;
    }


    /**
     * 获取素材分类数据（可以根据$parent_id传入查一级或多级数据）
     * @param $type
     * @param $parent_id
     * @param $eid (编辑时为查二级分类数据)
     * @return array
     */
    public function getMaterialCateList($type,$parent_id=ZERO,$eid=null)
    {
        if(!empty($parent_id)){
            $data = $this->model->where(['cate_uid' => $type])->get()->toArray();
        }else{
            if($eid){
                $materCate = $this->model->where(['cate_uid' => $type,'cate_id'=>$eid])->first();
                $data = $this->model->where(['cate_uid' => $type,'cate_parent_id'=>$materCate['cate_parent_id']])->get()->toArray();
            }else{
                $data = $this->model->where(['cate_uid' => $type,'cate_parent_id'=>$parent_id])->get()->toArray();
            }
        }

        $array = [];
        foreach ($data as $k=>$v){
            $array[$v['cate_id']] = $v['cate_name'];
        }
        return $array;
    }

    // .dai 选择素材分类的一级去获取素材分类下的二级分类数据，用id做下标，名称当值
    public function getChangeMaterialList($mdata=null)
    {
        $data = $this->model
            ->where(['cate_parent_id'=>$mdata['id']])
            ->select('cate_id','cate_name','cate_flag','cate_parent_id')->get()->toArray();
        $parentCate = $this->model
            ->where(['cate_id'=>$mdata['id']])
            ->select('cate_id','cate_name','cate_flag','cate_parent_id')->first();
        foreach ($data as $k=>$v){
            $data[$k]['cate_flag'] = $parentCate['cate_flag'];
        }
        return $data;
    }

    //获取分类标识下的素材分类数据 dai 6-30
    public function getFlagMaterCate($flag)
    {
        if($flag==MATERIAL_TYPE_BACKGROUND){
            $categoryArr = $this->model->where(['cate_flag' => $flag,'cate_parent_id'=>ZERO])->get()->toArray();
        }else{
            $category = $this->model->where(['cate_flag' => $flag,'cate_parent_id'=>ZERO])->first();
            $categoryArr = $this->model->where(['cate_parent_id'=>$category['cate_id']])->get()->toArray();
        }
        return $categoryArr;
    }
    /*// .dai form表单获取素材分类下的一级分类数据，用id做下标，名称当值
    public function getMaterialChildCateList($mtype,$id=null)
    {
        $cateList = DB::table('saas_material')->where('material_id',$id)->first();
        $materCate = $this->model->where(['cate_uid' => $mtype,'cate_id'=>$cateList->material_cateid])->first();
        $data = $this->model->where(['cate_uid' => $mtype,'cate_parent_id'=>$materCate->cate_parent_id])->get()->toArray();
        $array = [];
        foreach ($data as $k=>$v){
            $array['com'][$v['cate_id']] = $v['cate_name'];
            $array['parent'][$v['cate_parent_id']] = $v['cate_name'];
            // $array[$v['cate_id']] = $v['cate_name'];
        }
        return $array;
    }
    // .dai 获取模板主题分类数据，用id做下标，名称当值 5/25号删除多余方法
    public function getTempThemeList()
    {
        $data = $this->model->where(['cate_uid'=>'template'])->select('cate_id','cate_name')->get()->toArray();
        $array = [];
        foreach ($data as $k=>$v){
            $array[$v['cate_id']] = $v['cate_name'];
        }
        return $array;
    }*/
    // .dai 获取商品分类的个性化印刷第三级分类数据，用id做下标名称当值 /2020-04-16
    public function getGoodsThirdCate()
    {
        //$goodsCate = $this->model->where(['cate_flag' => 'personal','cate_level'=>2])->first();
        $goodsCate = $this->model->where(['cate_flag' => 'personal','cate_level'=>2])->get()->toArray();
        $goodsCateList = [];
        foreach ($goodsCate as $k=>$v){
            $goodsCateList[$k] = $v['cate_id'] ;
        }

        $data = $this->model->whereIn('cate_parent_id',$goodsCateList)->select('cate_id','cate_name','cate_flag')->get()->toArray();

        return $data;
    }
    // .dai 获取分类数据一条
    public function getCategoryFlag($cateId,$parentId='')
    {
        $data = $this->model->where(['cate_id' => $cateId])->first();
        //如果需要查找父级的数据请传$parentId，只要不为空的值都可以
        if(!empty($parentId) && $data['cate_parent_id']!=ZERO){
            $data = $this->model->where(['cate_id' => $data['cate_parent_id'],'cate_parent_id'=>0])->first();
        }
        return $data;
    }

    // .liu 获取某个等级分类的所有数据
    public function getLevelCateList($type,$level,$cate_id=null)
    {
        if(empty($cate_id)){
            $data = $this->model->where(['cate_uid' => $type,'cate_level'=>$level])->orderBy('cate_id','desc')->get()->toArray();
        }else{
            $data = $this->model->where(['cate_uid' => $type,'cate_level'=>$level,'cate_id'=>$cate_id])->orderBy('cate_id','desc')->get()->toArray();
        }

        $array = [];
        foreach ($data as $k=>$v){
            $array[$v['cate_id']][0] = $v['cate_name'];
            $array[$v['cate_id']][1] = $v['cate_nickname'];
        }
        return $array;
    }

    //获取商品分类的层级名称(仅前三级分类)
    public function getAllCateName($cateId)
    {

        $categoryParent = $this->getParentId($cateId,'goods');
        $categoryArr = explode(',',$categoryParent);

        if (!empty($categoryArr))
        {
            $parentArr = $this->model->whereIn('cate_id',$categoryArr)->get()->toArray();
            $returnArr = [];
            foreach ($parentArr as $k=>$v)
            {
                $returnArr[$v['cate_id']] = $v['cate_name'];
            }
            ksort($returnArr);
           return $returnArr;
        }else{
            return [];
        }

    }
    //判断是否为影像类商品(仅前三级分类)
    public function isPersonalPrint($cate_id)
    {

        if ($cate_id == PERSONAL_PRINTING_ID || $cate_id == COMMERCIAL_PRINTING_ID){
            return 1;
        }else{
            $cate_pid = $this->model->where(['cate_id' => $cate_id])->value('cate_parent_id');
            if ($cate_pid == PERSONAL_PRINTING_ID || $cate_pid == COMMERCIAL_PRINTING_ID){
                return 1;
            }else{
                return 0;
            }
        }
    }

    //判断是否为影像类商品（支持查询个性印刷商品与商务印刷商品，通过$flag判断）
    //个性印刷：PERSONAL_PRINTING_ID
    //商务印刷：COMMERCIAL_PRINTING_ID
    public function checkPrint($product_id,$flag = PERSONAL_PRINTING_ID)
    {
        $productModel = app(SaasProducts::class);
        $cate_id = $productModel->where('prod_id',$product_id)->value('prod_cate_uid');
        if (empty($cate_id)){
            return 0;
        }else{
            $cate_pid = $this->model->where(['cate_id' => $cate_id])->value('cate_parent_id');
            if ($cate_pid == $flag ){
                return 1;
            }else{
                return 0;
            }
        }
    }

    //获取商务印刷类的数据，根据$is_arr是否传值返回所有的id组合
    public function getCommercialList($is_arr=null)
    {
        $cate = $this->model->where(['cate_flag'=>GOODS_PRINTER_CATEGORY_COM])->first();
        if(!empty($cate)){
            $cateList = $this->model->where(['cate_parent_id'=>$cate->cate_id])->get()->toArray();
        }

        if(!empty($is_arr)){
            if(!empty($cateList)){
                $cateList = array_column($cateList,'cate_id');
            }
        }

        return $cateList;
    }






}
